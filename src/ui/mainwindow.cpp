// --- src/ui/mainwindow.cpp ---
// You will need to create a UI file in Qt Designer and link it,
// but for this example, we assume a UI with object names like:
// formatButton, mountButton, fileListWidget, fileContentTextEdit, etc.
// The code below is a simplified representation.
// For a real project, you'd use Qt Creator to generate the UI file.

#include "ui/mainwindow.h"
#include "ui_mainwindow.h" // This header is auto-generated by Qt's build system
#include <QMessageBox>
#include <QInputDialog>
#include <QListWidgetItem>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow) {
    ui->setupUi(this);
    fs = std::make_unique<FileSystem>("my_virtual_disk.fs");
    
    // Disable buttons until mounted
    ui->fileListWidget->setEnabled(false);
    ui->fileContentTextEdit->setEnabled(false);
    ui->saveButton->setEnabled(false);
    ui->mkdirButton->setEnabled(false);
    ui->createFileButton->setEnabled(false);
}

MainWindow::~MainWindow() {
    delete ui;
}

void MainWindow::refreshFileList() {
    ui->fileListWidget->clear();
    auto entries = fs->ls();
    
    // Add ".." to go up a directory
    QListWidgetItem* up_item = new QListWidgetItem("..");
    up_item->setData(Qt::UserRole, -1); // Special inode number for 'up'
    ui->fileListWidget->addItem(up_item);

    for (const auto& entry : entries) {
        if (std::string(entry.name) == "." || std::string(entry.name) == "..") continue;

        Inode inode = fs->get_inode(entry.inode_num);
        QString prefix = (inode.mode == 2) ? "[D] " : "[F] ";
        QListWidgetItem* item = new QListWidgetItem(prefix + QString::fromStdString(entry.name));
        item->setData(Qt::UserRole, entry.inode_num);
        ui->fileListWidget->addItem(item);
    }
}

void MainWindow::on_formatButton_clicked() {
    QMessageBox::StandardButton reply;
    reply = QMessageBox::warning(this, "Format Disk", "Are you sure you want to format the disk? All data will be lost.",
                                 QMessageBox::Yes|QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        fs->format();
        QMessageBox::information(this, "Success", "Virtual disk formatted.");
        refreshFileList();
    }
}

void MainWindow::on_mountButton_clicked() {
    if (fs->mount()) {
        QMessageBox::information(this, "Success", "File system mounted.");
        ui->fileListWidget->setEnabled(true);
        ui->fileContentTextEdit->setEnabled(true);
        ui->saveButton->setEnabled(true);
        ui->mkdirButton->setEnabled(true);
        ui->createFileButton->setEnabled(true);
        refreshFileList();
    } else {
        QMessageBox::critical(this, "Error", "Could not mount file system. Have you formatted it?");
    }
}

void MainWindow::on_fileListWidget_itemDoubleClicked(QListWidgetItem *item) {
    int inode_num = item->data(Qt::UserRole).toInt();
    
    if (inode_num == -1) { // Special case for ".."
        fs->cd("..");
        refreshFileList();
        return;
    }

    Inode inode = fs->get_inode(inode_num);
    std::string name = item->text().mid(4).toStdString(); // remove prefix

    if (inode.mode == 2) { // Directory
        fs->cd(name);
        refreshFileList();
    } else { // File
        current_open_file = name;
        ui->fileContentTextEdit->setPlainText(QString::fromStdString(fs->read(name)));
    }
}

void MainWindow::on_saveButton_clicked() {
    if (!current_open_file.empty()) {
        std::string content = ui->fileContentTextEdit->toPlainText().toStdString();
        fs->write(current_open_file, content);
        QMessageBox::information(this, "Success", "File saved.");
    }
}

void MainWindow::on_mkdirButton_clicked() {
    bool ok;
    QString text = QInputDialog::getText(this, "Create Directory", "Directory name:", QLineEdit::Normal, "", &ok);
    if (ok && !text.isEmpty()) {
        fs->mkdir(text.toStdString());
        refreshFileList();
    }
}

void MainWindow::on_createFileButton_clicked() {
    bool ok;
    QString text = QInputDialog::getText(this, "Create File", "File name:", QLineEdit::Normal, "", &ok);
    if (ok && !text.isEmpty()) {
        fs->create(text.toStdString());
        refreshFileList();
    }
}


